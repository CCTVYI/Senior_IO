#include <sys/socket.h>
#include <sys/select.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
//将客户端发的消息显示到屏幕上

void Init(int *fd_list,int len)
{
	int i=0;
	for(i=0;i<len;i++)
	{
		fd_list[i]=-1;  //设为什么都不关心
	}
}

//将数组下标的内容都设置为关心读事件
void Reload(int listen_fd,int *connect_list,int connect_list_size,fd_set* read_fds,int *max_fd)
{
	FD_ZERO(read_fds);
	FD_SET(listen_fd,read_fds);
	int max=listen_fd;
	int i=0;
	for(i=0;i<connect_list_size;i++)
	{
		if(connect_list[i]!=-1)
		{
			FD_SET(connect_list[i],read_fds);		//将该文件描述符设为关心读事件。	
			if(connect_list[i]>max)
			{
				max=connect_list[i];
			}
		}
	}
	*max_fd=max;

}

//关心某个文件描述符，不等于-1，说明不关心此描述符。
void Add(int fd,int* connect_list,int connect_list_size)
{
	int i=0;
	for(i=0;i<connect_list_size;i++)
	{
		if(connect_list[i]==-1)
		{
			connect_list[i]=fd;
			break;
		}
	}
	return;
}

int main(int argc,char* argv[])
{
	if(argc!=3)
	{
		printf("Usage:./server [IP] [port]\n");
		return 1;
	}
	struct sockaddr_in addr;
	addr.sin_family=AF_INET;
	addr.sin_addr.s_addr=inet_addr(argv[1]);
	addr.sin_port=htons(atoi(argv[2]));

  //创建监听套接字
	int listen_fd=socket(AF_INET,SOCK_STREAM,0);
	if(listen_fd<0)
	{
		perror("socket");
		return 1;
	}
	int ret=bind(listen_fd,(struct sockaddr*)&addr,sizeof(addr));
	if(ret<0)
	{
		perror("bind");
		return 1;
	}
	ret=listen(listen_fd,10);
	if(ret<0)
	{
		perror("listen");
		return 1;
	}

	fd_set read_fds;
	int fd_list[1024];
  //初始化数组，全部设置为1
	Init(fd_list,sizeof(fd_list)/sizeof(int));
	
	for(;;)
	{
		int max_fd=listen_fd;
		Reload(listen_fd,fd_list,sizeof(fd_list)/sizeof(int),&read_fds,&max_fd);
		printf("before select:%d\n",FD_ISSET(listen_fd,&read_fds));
    //最大文件描述符编号加一，因为数组下标是从0开始的
		int ret=select(max_fd+1,&read_fds,NULL,NULL,NULL);
		printf("after select:%d\n",FD_ISSET(listen_fd,&read_fds));
		if(ret<0)
		{
			perror("select\n");
			continue;
		}
		if(ret==0)
		{
			printf("select timeout\n");
			continue;
		}
    
		//处理监听套接字
		if(FD_ISSET(listen_fd,&read_fds))
		{
			struct sockaddr_in client_addr;
			socklen_t len=sizeof(client_addr);
      //分配服务员
			int connect_fd=accept(listen_fd,(struct sockaddr*)&client_addr,&len);
			if(connect_fd<0)
			{
				perror("accept");
				continue;
			}
			printf("client:%s:%d connect\n",inet_ntoa(client_addr.sin_addr),ntohs(client_addr.sin_port));
      //
			Add(connect_fd,fd_list,sizeof(fd_list)/sizeof(int));
		}
    
		//处理连接套接字,检查是否被设置
		int i=0;
		for(i=0;i<sizeof(fd_list)/sizeof(int);i++)
		{
			if(fd_list[i]==-1)  //直接处理下一个套接字
			{
				continue;
			}
			if(!FD_ISSET(fd_list[i],&read_fds))  //读事件是否被设置，没设置处理下一个套接字。
			{
				continue;
			}
			char buf[1024]={0};
			ssize_t read_size=read(fd_list[i],buf,sizeof(buf)-1);
			if(read_size<0)
			{
				perror("read\n");
				continue;
			}
			if(read_size==0)
			{
				printf("client close\n");
				close(fd_list[i]);
				fd_list[i]=-1;  //该事件关心完毕后，将该位复原，初始化为-1。
			}
			printf("client say:%s",buf);
			write(fd_list[i],buf,strlen(buf));
		}
	}
	return 0;
}
