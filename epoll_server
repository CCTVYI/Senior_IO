#include <sys/epoll.h>
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

void Add_connect(int listen_fd,int epoll_fd)
{
	struct sockaddr_in client_addr;
	socklen_t len=sizeof(client_addr);
	int connect_fd=accept(listen_fd,(struct sockaddr*)&client_addr,&len);  //接收连接请求
	if(connect_fd<0)
	{
		perror("accept\n");
		return;
	}
	printf("client:%s %d\n",inet_ntoa(client_addr.sin_addr),ntohs(client_addr.sin_port));
	//将常规套接字添加到epoll模型
	struct epoll_event ev;
	ev.data.fd=connect_fd;
	ev.events=EPOLLIN;
	int ret=epoll_ctl(epoll_fd,EPOLL_CTL_ADD,connect_fd,&ev);
	if(ret<0)
	{
		perror("epoll_ctl\n");
		return;
	}
	return;
}

void Request(int connect_fd,int epoll_fd)
{
	char buf[1024]={0};
	int size=read(connect_fd,buf,sizeof(buf)-1);
	if(size<0)
	{
		perror("read\n");
		return;
	}
	if(size==0)
	{
		close(connect_fd);
		//将该常规套接字从红黑树中删除
		epoll_ctl(epoll_fd,EPOLL_CTL_DEL,connect_fd,NULL);
		printf("client is say bye!\n");
		return;
	}
	printf("client:%s\n",buf);
	write(connect_fd,buf,strlen(buf));
}

int main(int argc,char *argv[])
{
	if(argc!=2)
	{
		printf("Usage:./epoll_server [port]\n");
		exit(1);
	}
	struct sockaddr_in addr;
	addr.sin_family=AF_INET;
	addr.sin_port=htons(atoi(argv[1]));
	addr.sin_addr.s_addr=htonl(INADDR_ANY);

	int listen_fd=socket(AF_INET,SOCK_STREAM,0);
	if(listen_fd<0)
	{
		perror("socket\n");
		exit(2);
	}

	int ret=bind(listen_fd,(struct sockaddr*)&addr,sizeof(addr));
	if(ret<0)
	{
		perror("bind\n");
		exit(3);
	}

	ret=listen(listen_fd,10);
	if(ret<0)
	{
		perror("listen\n");
		exit(4);
	}
	
	//创建epoll句柄
	int epoll_fd=epoll_create(10);
	if(epoll_fd<0)
	{
		perror("epoll_create\n");
		exit(5);
	}
	struct epoll_event event;
	event.events=EPOLLIN;  //关注的事件是读操作
	event.data.fd=listen_fd;
	ret=epoll_ctl(epoll_fd,EPOLL_CTL_ADD,listen_fd,&event);
	if(ret<0)
	{
		perror("epoll_ctl\n");
		exit(6);
	}
	for(;;)
	{
		struct epoll_event events[10];
		int size=epoll_wait(epoll_fd,events,sizeof(events)/sizeof(events[0]),-1);
		if(size<0)
		{
			perror("epoll_wait\n");
			continue;  //阻塞
		}
		if(size==0)
		{
			printf("epoll timeout\n");
			continue;
		}
		int i=0;
		for(i=0;i<size;i++)
		{
			if(!events[i].events & EPOLLIN)
			{
				continue;
			}
			//处理监听套接字
			if(events[i].data.fd==listen_fd)
			{
				Add_connect(listen_fd,epoll_fd);
			}
			//处理常规套接字
			else
				Request(events[i].data.fd,epoll_fd);
		}
	}
	return 0;
}
